// Code generated by protoc-gen-go.
// source: github.com/appcelerator/amp/api/rpc/stack/stack.proto
// DO NOT EDIT!

/*
Package stack is a generated protocol buffer package.

It is generated from these files:
	github.com/appcelerator/amp/api/rpc/stack/stack.proto

It has these top-level messages:
	UpRequest
	UpReply
	StackRequest
	RemoveRequest
	StackReply
	ListRequest
	ListReply
	StackInfo
	StackID
	CustomNetwork
	IdList
	NetworkSpec
	NetworkIPAM
	NetworkIPAMConfig
	Stack
*/
package stack

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import service "github.com/appcelerator/amp/api/rpc/service"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type StackState int32

const (
	StackState_Stopped     StackState = 0
	StackState_Starting    StackState = 1
	StackState_Running     StackState = 2
	StackState_Redeploying StackState = 3
)

var StackState_name = map[int32]string{
	0: "Stopped",
	1: "Starting",
	2: "Running",
	3: "Redeploying",
}
var StackState_value = map[string]int32{
	"Stopped":     0,
	"Starting":    1,
	"Running":     2,
	"Redeploying": 3,
}

func (x StackState) String() string {
	return proto.EnumName(StackState_name, int32(x))
}
func (StackState) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// struct for up request function
type UpRequest struct {
	StackName string `protobuf:"bytes,1,opt,name=stack_name,json=stackName" json:"stack_name,omitempty"`
	Stackfile string `protobuf:"bytes,2,opt,name=stackfile" json:"stackfile,omitempty"`
}

func (m *UpRequest) Reset()                    { *m = UpRequest{} }
func (m *UpRequest) String() string            { return proto.CompactTextString(m) }
func (*UpRequest) ProtoMessage()               {}
func (*UpRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// struct for up reply function
type UpReply struct {
	StackId string `protobuf:"bytes,1,opt,name=stack_id,json=stackId" json:"stack_id,omitempty"`
}

func (m *UpReply) Reset()                    { *m = UpReply{} }
func (m *UpReply) String() string            { return proto.CompactTextString(m) }
func (*UpReply) ProtoMessage()               {}
func (*UpReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// struct for start and stop request functions
type StackRequest struct {
	StackIdent string `protobuf:"bytes,1,opt,name=stack_ident,json=stackIdent" json:"stack_ident,omitempty"`
}

func (m *StackRequest) Reset()                    { *m = StackRequest{} }
func (m *StackRequest) String() string            { return proto.CompactTextString(m) }
func (*StackRequest) ProtoMessage()               {}
func (*StackRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

// struct for remove request function
type RemoveRequest struct {
	StackIdent string `protobuf:"bytes,1,opt,name=stack_ident,json=stackIdent" json:"stack_ident,omitempty"`
	Force      bool   `protobuf:"varint,2,opt,name=force" json:"force,omitempty"`
}

func (m *RemoveRequest) Reset()                    { *m = RemoveRequest{} }
func (m *RemoveRequest) String() string            { return proto.CompactTextString(m) }
func (*RemoveRequest) ProtoMessage()               {}
func (*RemoveRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

// struct for start, stop and remove reply functions
type StackReply struct {
	StackId string `protobuf:"bytes,1,opt,name=stack_id,json=stackId" json:"stack_id,omitempty"`
}

func (m *StackReply) Reset()                    { *m = StackReply{} }
func (m *StackReply) String() string            { return proto.CompactTextString(m) }
func (*StackReply) ProtoMessage()               {}
func (*StackReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

// struct for list request function
type ListRequest struct {
}

func (m *ListRequest) Reset()                    { *m = ListRequest{} }
func (m *ListRequest) String() string            { return proto.CompactTextString(m) }
func (*ListRequest) ProtoMessage()               {}
func (*ListRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

// struct for list reply function
type ListReply struct {
	List []*StackInfo `protobuf:"bytes,1,rep,name=list" json:"list,omitempty"`
}

func (m *ListReply) Reset()                    { *m = ListReply{} }
func (m *ListReply) String() string            { return proto.CompactTextString(m) }
func (*ListReply) ProtoMessage()               {}
func (*ListReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *ListReply) GetList() []*StackInfo {
	if m != nil {
		return m.List
	}
	return nil
}

// struct part of ListReply Struct
type StackInfo struct {
	Name  string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Id    string `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	State string `protobuf:"bytes,3,opt,name=state" json:"state,omitempty"`
}

func (m *StackInfo) Reset()                    { *m = StackInfo{} }
func (m *StackInfo) String() string            { return proto.CompactTextString(m) }
func (*StackInfo) ProtoMessage()               {}
func (*StackInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

// struct to store Stack id in ETCD
type StackID struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *StackID) Reset()                    { *m = StackID{} }
func (m *StackID) String() string            { return proto.CompactTextString(m) }
func (*StackID) ProtoMessage()               {}
func (*StackID) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

// struct to store network info in ETCD
type CustomNetwork struct {
	Id          string       `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	OwnerNumber int32        `protobuf:"varint,2,opt,name=owner_number,json=ownerNumber" json:"owner_number,omitempty"`
	Data        *NetworkSpec `protobuf:"bytes,3,opt,name=data" json:"data,omitempty"`
}

func (m *CustomNetwork) Reset()                    { *m = CustomNetwork{} }
func (m *CustomNetwork) String() string            { return proto.CompactTextString(m) }
func (*CustomNetwork) ProtoMessage()               {}
func (*CustomNetwork) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *CustomNetwork) GetData() *NetworkSpec {
	if m != nil {
		return m.Data
	}
	return nil
}

// struct to store service id list in ETCD
type IdList struct {
	List []string `protobuf:"bytes,1,rep,name=list" json:"list,omitempty"`
}

func (m *IdList) Reset()                    { *m = IdList{} }
func (m *IdList) String() string            { return proto.CompactTextString(m) }
func (*IdList) ProtoMessage()               {}
func (*IdList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

type NetworkSpec struct {
	Name       string            `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Driver     string            `protobuf:"bytes,2,opt,name=driver" json:"driver,omitempty"`
	EnableIpv6 bool              `protobuf:"varint,3,opt,name=enable_ipv6,json=enableIpv6" json:"enable_ipv6,omitempty"`
	Ipam       *NetworkIPAM      `protobuf:"bytes,4,opt,name=ipam" json:"ipam,omitempty"`
	Internal   bool              `protobuf:"varint,5,opt,name=internal" json:"internal,omitempty"`
	Options    map[string]string `protobuf:"bytes,6,rep,name=options" json:"options,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Labels     map[string]string `protobuf:"bytes,7,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *NetworkSpec) Reset()                    { *m = NetworkSpec{} }
func (m *NetworkSpec) String() string            { return proto.CompactTextString(m) }
func (*NetworkSpec) ProtoMessage()               {}
func (*NetworkSpec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *NetworkSpec) GetIpam() *NetworkIPAM {
	if m != nil {
		return m.Ipam
	}
	return nil
}

func (m *NetworkSpec) GetOptions() map[string]string {
	if m != nil {
		return m.Options
	}
	return nil
}

func (m *NetworkSpec) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

type NetworkIPAM struct {
	Driver  string               `protobuf:"bytes,1,opt,name=driver" json:"driver,omitempty"`
	Options map[string]string    `protobuf:"bytes,2,rep,name=options" json:"options,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Config  []*NetworkIPAMConfig `protobuf:"bytes,3,rep,name=config" json:"config,omitempty"`
}

func (m *NetworkIPAM) Reset()                    { *m = NetworkIPAM{} }
func (m *NetworkIPAM) String() string            { return proto.CompactTextString(m) }
func (*NetworkIPAM) ProtoMessage()               {}
func (*NetworkIPAM) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *NetworkIPAM) GetOptions() map[string]string {
	if m != nil {
		return m.Options
	}
	return nil
}

func (m *NetworkIPAM) GetConfig() []*NetworkIPAMConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

type NetworkIPAMConfig struct {
	Subnet     string            `protobuf:"bytes,1,opt,name=subnet" json:"subnet,omitempty"`
	IpRange    string            `protobuf:"bytes,2,opt,name=ip_range,json=ipRange" json:"ip_range,omitempty"`
	Gateway    string            `protobuf:"bytes,3,opt,name=gateway" json:"gateway,omitempty"`
	AuxAddress map[string]string `protobuf:"bytes,4,rep,name=aux_address,json=auxAddress" json:"aux_address,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *NetworkIPAMConfig) Reset()                    { *m = NetworkIPAMConfig{} }
func (m *NetworkIPAMConfig) String() string            { return proto.CompactTextString(m) }
func (*NetworkIPAMConfig) ProtoMessage()               {}
func (*NetworkIPAMConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *NetworkIPAMConfig) GetAuxAddress() map[string]string {
	if m != nil {
		return m.AuxAddress
	}
	return nil
}

// Stack struct
type Stack struct {
	Name     string                 `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Id       string                 `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	Services []*service.ServiceSpec `protobuf:"bytes,3,rep,name=services" json:"services,omitempty"`
	Networks []*NetworkSpec         `protobuf:"bytes,4,rep,name=networks" json:"networks,omitempty"`
	IsPublic bool                   `protobuf:"varint,5,opt,name=is_public,json=isPublic" json:"is_public,omitempty"`
}

func (m *Stack) Reset()                    { *m = Stack{} }
func (m *Stack) String() string            { return proto.CompactTextString(m) }
func (*Stack) ProtoMessage()               {}
func (*Stack) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *Stack) GetServices() []*service.ServiceSpec {
	if m != nil {
		return m.Services
	}
	return nil
}

func (m *Stack) GetNetworks() []*NetworkSpec {
	if m != nil {
		return m.Networks
	}
	return nil
}

func init() {
	proto.RegisterType((*UpRequest)(nil), "stack.UpRequest")
	proto.RegisterType((*UpReply)(nil), "stack.UpReply")
	proto.RegisterType((*StackRequest)(nil), "stack.StackRequest")
	proto.RegisterType((*RemoveRequest)(nil), "stack.removeRequest")
	proto.RegisterType((*StackReply)(nil), "stack.StackReply")
	proto.RegisterType((*ListRequest)(nil), "stack.ListRequest")
	proto.RegisterType((*ListReply)(nil), "stack.ListReply")
	proto.RegisterType((*StackInfo)(nil), "stack.StackInfo")
	proto.RegisterType((*StackID)(nil), "stack.StackID")
	proto.RegisterType((*CustomNetwork)(nil), "stack.CustomNetwork")
	proto.RegisterType((*IdList)(nil), "stack.IdList")
	proto.RegisterType((*NetworkSpec)(nil), "stack.NetworkSpec")
	proto.RegisterType((*NetworkIPAM)(nil), "stack.NetworkIPAM")
	proto.RegisterType((*NetworkIPAMConfig)(nil), "stack.NetworkIPAMConfig")
	proto.RegisterType((*Stack)(nil), "stack.Stack")
	proto.RegisterEnum("stack.StackState", StackState_name, StackState_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for StackService service

type StackServiceClient interface {
	Up(ctx context.Context, in *UpRequest, opts ...grpc.CallOption) (*UpReply, error)
	Start(ctx context.Context, in *StackRequest, opts ...grpc.CallOption) (*StackReply, error)
	Stop(ctx context.Context, in *StackRequest, opts ...grpc.CallOption) (*StackReply, error)
	Remove(ctx context.Context, in *RemoveRequest, opts ...grpc.CallOption) (*StackReply, error)
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListReply, error)
}

type stackServiceClient struct {
	cc *grpc.ClientConn
}

func NewStackServiceClient(cc *grpc.ClientConn) StackServiceClient {
	return &stackServiceClient{cc}
}

func (c *stackServiceClient) Up(ctx context.Context, in *UpRequest, opts ...grpc.CallOption) (*UpReply, error) {
	out := new(UpReply)
	err := grpc.Invoke(ctx, "/stack.StackService/Up", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) Start(ctx context.Context, in *StackRequest, opts ...grpc.CallOption) (*StackReply, error) {
	out := new(StackReply)
	err := grpc.Invoke(ctx, "/stack.StackService/Start", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) Stop(ctx context.Context, in *StackRequest, opts ...grpc.CallOption) (*StackReply, error) {
	out := new(StackReply)
	err := grpc.Invoke(ctx, "/stack.StackService/Stop", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) Remove(ctx context.Context, in *RemoveRequest, opts ...grpc.CallOption) (*StackReply, error) {
	out := new(StackReply)
	err := grpc.Invoke(ctx, "/stack.StackService/Remove", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListReply, error) {
	out := new(ListReply)
	err := grpc.Invoke(ctx, "/stack.StackService/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for StackService service

type StackServiceServer interface {
	Up(context.Context, *UpRequest) (*UpReply, error)
	Start(context.Context, *StackRequest) (*StackReply, error)
	Stop(context.Context, *StackRequest) (*StackReply, error)
	Remove(context.Context, *RemoveRequest) (*StackReply, error)
	List(context.Context, *ListRequest) (*ListReply, error)
}

func RegisterStackServiceServer(s *grpc.Server, srv StackServiceServer) {
	s.RegisterService(&_StackService_serviceDesc, srv)
}

func _StackService_Up_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).Up(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stack.StackService/Up",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).Up(ctx, req.(*UpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stack.StackService/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).Start(ctx, req.(*StackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stack.StackService/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).Stop(ctx, req.(*StackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stack.StackService/Remove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).Remove(ctx, req.(*RemoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stack.StackService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _StackService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "stack.StackService",
	HandlerType: (*StackServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Up",
			Handler:    _StackService_Up_Handler,
		},
		{
			MethodName: "Start",
			Handler:    _StackService_Start_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _StackService_Stop_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _StackService_Remove_Handler,
		},
		{
			MethodName: "List",
			Handler:    _StackService_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() {
	proto.RegisterFile("github.com/appcelerator/amp/api/rpc/stack/stack.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 841 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xa4, 0x55, 0xef, 0x6e, 0xe3, 0x44,
	0x10, 0xc7, 0xf9, 0xef, 0x71, 0x7a, 0x97, 0x5b, 0x2a, 0xe4, 0x0b, 0x07, 0x07, 0xd6, 0xe9, 0xa8,
	0x10, 0x72, 0xee, 0x8a, 0xa8, 0xe8, 0x49, 0x7c, 0xa8, 0x8e, 0x22, 0x22, 0x1d, 0xe5, 0xe4, 0xa8,
	0x9f, 0xa3, 0x8d, 0xbd, 0x09, 0x4b, 0xed, 0xf5, 0xb2, 0x5e, 0xa7, 0xcd, 0x1b, 0xf0, 0x2c, 0x3c,
	0x0c, 0x0f, 0xc2, 0x13, 0xf0, 0x11, 0xed, 0x1f, 0x5b, 0x4e, 0x9b, 0x8a, 0x54, 0xf7, 0x25, 0xf1,
	0x6f, 0xe6, 0xf7, 0x9b, 0x9d, 0x99, 0xd5, 0xcc, 0xc2, 0x77, 0x2b, 0x2a, 0x7f, 0x2b, 0x17, 0x61,
	0x9c, 0x67, 0x13, 0xcc, 0x79, 0x4c, 0x52, 0x22, 0xb0, 0xcc, 0xc5, 0x04, 0x67, 0x7c, 0x82, 0x39,
	0x9d, 0x08, 0x1e, 0x4f, 0x0a, 0x89, 0xe3, 0x2b, 0xf3, 0x1b, 0x72, 0x91, 0xcb, 0x1c, 0x75, 0x35,
	0x18, 0x9f, 0xee, 0xa5, 0x26, 0x62, 0x4d, 0x63, 0x52, 0xfd, 0x9b, 0x08, 0xc1, 0xcf, 0xe0, 0x5e,
	0xf2, 0x88, 0xfc, 0x51, 0x92, 0x42, 0xa2, 0xcf, 0x00, 0x74, 0xc0, 0x39, 0xc3, 0x19, 0xf1, 0x9d,
	0x2f, 0x9c, 0x23, 0x37, 0x72, 0xb5, 0xe5, 0x02, 0x67, 0x04, 0x3d, 0x03, 0x03, 0x96, 0x34, 0x25,
	0x7e, 0xab, 0xe1, 0x55, 0x86, 0xe0, 0x05, 0xf4, 0x55, 0x24, 0x9e, 0x6e, 0xd0, 0x53, 0x18, 0x98,
	0x38, 0x34, 0xb1, 0x51, 0xfa, 0x1a, 0x4f, 0x93, 0x60, 0x02, 0xc3, 0x99, 0xfa, 0xac, 0x8e, 0x7c,
	0x0e, 0x5e, 0x45, 0x25, 0x4c, 0x5a, 0x36, 0x58, 0x36, 0x61, 0x32, 0xf8, 0x09, 0x0e, 0x04, 0xc9,
	0xf2, 0x35, 0xd9, 0x57, 0x81, 0x0e, 0xa1, 0xbb, 0xcc, 0x45, 0x6c, 0x52, 0x1c, 0x44, 0x06, 0x04,
	0x5f, 0x01, 0xd8, 0x83, 0xff, 0x27, 0xc3, 0x03, 0xf0, 0xde, 0xd1, 0x42, 0xda, 0xe3, 0x82, 0xd7,
	0xe0, 0x1a, 0xa8, 0x64, 0x2f, 0xa0, 0x93, 0xd2, 0x42, 0x1d, 0xda, 0x3e, 0xf2, 0x8e, 0x47, 0xa1,
	0xb9, 0x0b, 0x1d, 0x77, 0xca, 0x96, 0x79, 0xa4, 0xbd, 0xc1, 0x39, 0xb8, 0xb5, 0x09, 0x21, 0xe8,
	0x34, 0xba, 0xa9, 0xbf, 0xd1, 0x23, 0x68, 0xd1, 0xc4, 0x76, 0xb0, 0x45, 0x13, 0x95, 0x71, 0x21,
	0xb1, 0x24, 0x7e, 0x5b, 0x9b, 0x0c, 0x08, 0x9e, 0x42, 0xdf, 0x84, 0xf9, 0xd1, 0x0a, 0x9c, 0x4a,
	0x10, 0xfc, 0x0e, 0x07, 0x6f, 0xcb, 0x42, 0xe6, 0xd9, 0x05, 0x91, 0xd7, 0xb9, 0xb8, 0xba, 0x4d,
	0x40, 0x5f, 0xc2, 0x30, 0xbf, 0x66, 0x44, 0xcc, 0x59, 0x99, 0x2d, 0x88, 0xd0, 0x67, 0x75, 0x23,
	0x4f, 0xdb, 0x2e, 0xb4, 0x09, 0xbd, 0x84, 0x4e, 0x82, 0x25, 0xd6, 0x67, 0x7a, 0xc7, 0xc8, 0xd6,
	0x62, 0x03, 0xce, 0x38, 0x89, 0x23, 0xed, 0x0f, 0x9e, 0x41, 0x6f, 0x9a, 0xa8, 0x16, 0xa8, 0x52,
	0xea, 0xea, 0x5d, 0x5b, 0xeb, 0x9f, 0x6d, 0xf0, 0x1a, 0x9a, 0x9d, 0xe5, 0x7e, 0x02, 0xbd, 0x44,
	0xd0, 0xb5, 0x4d, 0xc3, 0x8d, 0x2c, 0x52, 0x37, 0x49, 0x18, 0x5e, 0xa4, 0x64, 0x4e, 0xf9, 0xfa,
	0x44, 0x27, 0x32, 0x88, 0xc0, 0x98, 0xa6, 0x7c, 0x7d, 0xa2, 0x52, 0xa4, 0x1c, 0x67, 0x7e, 0x67,
	0x57, 0x8a, 0xd3, 0xf7, 0x67, 0xbf, 0x44, 0xda, 0x8f, 0xc6, 0x30, 0xa0, 0x4c, 0x12, 0xc1, 0x70,
	0xea, 0x77, 0x75, 0x94, 0x1a, 0xa3, 0x53, 0xe8, 0xe7, 0x5c, 0xd2, 0x9c, 0x15, 0x7e, 0x4f, 0xdf,
	0xda, 0xf3, 0xbb, 0x95, 0x86, 0xbf, 0x1a, 0xc6, 0x39, 0x93, 0x62, 0x13, 0x55, 0x7c, 0x74, 0x02,
	0xbd, 0x14, 0x2f, 0x48, 0x5a, 0xf8, 0x7d, 0xad, 0xfc, 0x7c, 0x87, 0xf2, 0x9d, 0x26, 0x18, 0xa1,
	0x65, 0x8f, 0xdf, 0xc0, 0xb0, 0x19, 0x10, 0x8d, 0xa0, 0x7d, 0x45, 0x36, 0xb6, 0x25, 0xea, 0x53,
	0x5d, 0xf8, 0x1a, 0xa7, 0x65, 0x35, 0x45, 0x06, 0xbc, 0x69, 0x7d, 0xef, 0x8c, 0x4f, 0xc1, 0x6b,
	0x84, 0x7c, 0x88, 0x34, 0xf8, 0xdb, 0xa9, 0xaf, 0x42, 0xf5, 0xa6, 0xd1, 0x76, 0x67, 0xab, 0xed,
	0x8d, 0x8e, 0xb4, 0x76, 0x75, 0x44, 0x89, 0xef, 0xe9, 0xc8, 0x2b, 0xe8, 0xc5, 0x39, 0x5b, 0xd2,
	0x95, 0xdf, 0xd6, 0x4a, 0xff, 0xae, 0xf2, 0xad, 0xf6, 0x47, 0x96, 0xf7, 0x21, 0xbd, 0x08, 0xfe,
	0x71, 0xe0, 0xc9, 0x9d, 0xc8, 0xaa, 0xac, 0xa2, 0x5c, 0x30, 0x52, 0x8d, 0xbe, 0x45, 0x6a, 0xa4,
	0x29, 0x9f, 0x0b, 0xcc, 0x56, 0x55, 0xa8, 0x3e, 0xe5, 0x91, 0x82, 0xc8, 0x87, 0xfe, 0x0a, 0x4b,
	0x72, 0x8d, 0x37, 0x76, 0xc2, 0x2a, 0x88, 0xa6, 0xe0, 0xe1, 0xf2, 0x66, 0x8e, 0x93, 0x44, 0x90,
	0xa2, 0xf0, 0x3b, 0xba, 0xaa, 0xa3, 0xfb, 0xaa, 0x0a, 0xcf, 0xca, 0x9b, 0x33, 0x43, 0x35, 0x8d,
	0x01, 0x5c, 0x1b, 0xc6, 0x3f, 0xc0, 0xe3, 0x5b, 0xee, 0x07, 0x15, 0xfb, 0x97, 0x03, 0x5d, 0x3d,
	0xee, 0x7b, 0x6d, 0x8c, 0x57, 0x30, 0xb0, 0x7b, 0xbc, 0xb0, 0x57, 0x71, 0x18, 0x56, 0x8b, 0x7d,
	0x66, 0xfe, 0xf5, 0x08, 0xd7, 0x2c, 0x14, 0xc2, 0x80, 0x99, 0x7a, 0xaa, 0x32, 0x77, 0x8d, 0x7c,
	0xcd, 0x41, 0x9f, 0x82, 0x4b, 0x8b, 0x39, 0x2f, 0x17, 0x29, 0x8d, 0xeb, 0xa1, 0x2a, 0xde, 0x6b,
	0xfc, 0xf5, 0xb9, 0x5d, 0xa6, 0x33, 0xb5, 0xa8, 0x90, 0xa7, 0x16, 0x55, 0xce, 0x39, 0x49, 0x46,
	0x1f, 0xa1, 0x21, 0x0c, 0x66, 0x12, 0x0b, 0x49, 0xd9, 0x6a, 0xe4, 0x28, 0x57, 0x54, 0x32, 0xa6,
	0x40, 0x0b, 0x3d, 0x06, 0x2f, 0x22, 0x09, 0xe1, 0x69, 0xbe, 0x51, 0x86, 0xf6, 0xf1, 0xbf, 0x8e,
	0x7d, 0x0d, 0x6c, 0xca, 0xe8, 0x25, 0xb4, 0x2e, 0x39, 0xaa, 0xf6, 0x6a, 0xfd, 0x30, 0x8d, 0x1f,
	0x35, 0x2c, 0x6a, 0x0f, 0x4f, 0x74, 0xaf, 0x84, 0x44, 0x1f, 0x37, 0x57, 0x70, 0xc5, 0x7e, 0xb2,
	0x6d, 0x54, 0x82, 0x10, 0x3a, 0x2a, 0xc5, 0xbd, 0xf9, 0xaf, 0xa1, 0x17, 0xe9, 0x57, 0x07, 0x1d,
	0x5a, 0xe7, 0xd6, 0x23, 0xb4, 0x4b, 0xf2, 0x0d, 0x74, 0xcc, 0x96, 0xb4, 0xae, 0xc6, 0x23, 0x32,
	0x1e, 0x6d, 0xd9, 0x78, 0xba, 0x59, 0xf4, 0xf4, 0xf3, 0xfb, 0xed, 0x7f, 0x01, 0x00, 0x00, 0xff,
	0xff, 0x02, 0xcc, 0x1f, 0xb5, 0xf9, 0x07, 0x00, 0x00,
}
